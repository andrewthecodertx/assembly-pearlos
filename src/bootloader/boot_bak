org 0x7c00
bits 16

%define ENDL 0x0d, 0x0a

jmp short start
nop

; BIOS param block
bdb_oem:                    db 'MSWIN4.1'
bdb_bytes_per_sector:       dw 512
bdb_sectors_per_cluster:    db 1 
bdb_reserved_sectors:       dw 1
bdb_fat_count:              db 2
bdb_dir_entries_count:      dw 0e0h
bdb_total_sectors:          dw 2880
bdb_media_description_type: db 0f0h
bdb_sectors_per_fat:        dw 9
bdb_sectors_per_track:      dw 18
bdb_heads:                  dw 2
bdb_hidden_sectors:         dd 0
bdb_large_sector_count:     dd 0

; extended boot record
ebr_drive_number:           db 0
                            db 0
ebr_signature:              db 29h
ebr_volume_id:              db 66h, 66h, 66h, 66h
ebr_volume_label:           db 'PearlOS    '
ebr_system_id:              db 'FAT12   '

; 32-bit protected mode entry point
CODE_SEG equ 0x08
DATA_SEG equ 0x10

start:
    jmp main

puts:
    push si
    push ax

.loop:
    lodsb
    or al, al
    jz .done

    mov ah, 0x0e
    int 0x10

    jmp .loop

.done:
    pop ax
    pop si
    ret

main:
    mov ax, 0
    mov ds, ax
    mov es, ax

    ;stack
    mov ss, ax
    mov sp, 0x7c00
    mov [ebr_drive_number], dl

    ; Transition to 32-bit protected mode
    lgdt [gdt_descriptor]
    mov eax, cr0
    or eax, 1
    mov cr0, eax
    jmp CODE_SEG:init_pm

gdt_start:
    dd 0                ; Null descriptor
    dd 0

    ; Code segment descriptor: Base=0, Limit=4GB, 1 DPL=0, Present
    dd 0x00FFFFFF       ; Limit (bits 0-15)
    dd 0x00CF9A00       ; Access byte, flags, base (bits 16-23)

    ; Data segment descriptor: Base=0, Limit=4GB, 1 DPL=0, Present
    dd 0x00FFFFFF       ; Limit (bits 0-15)
    dd 0x00CF9200       ; Access byte, flags, base (bits 16-23)

gdt_end:
    ; GDT descriptor
    gdt_descriptor:
        dw gdt_end - gdt_start - 1  ; Size of the GDT
        dd gdt_start               ; Address of the GDT

[bits 32]
init_pm:
    mov ax, DATA_SEG  ; DATA_SEG is the offset to the data segment in the GDT
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ss, ax

    ; Initialize stack pointer
    mov esp, stack_space ; Assume stack_space is defined somewhere in your memory

    ; Continue with 32-bit initialization, such as setting up interrupts, loading kernel, etc.

    ; Print startup message to screen
    mov si, msg_startup
    call puts

    cli                 ; Disable interrupts for now
    hlt
    ; More initialization and kernel code goes here

stack_space:  ; Define the stack space for 32-bit mode
    resb 4096   ; Adjust the size as needed

msg_startup:        db 'Welcome to PearlOS', ENDL, 0

times 510-($-$$) db 0
dw 0xaa55  ; Boot signature
